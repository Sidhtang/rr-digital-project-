front end code
// app/layout.tsx
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import { FormProvider } from '@/context/FormContext'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'KYC Registration',
  description: 'Know Your Customer Registration Form'
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <FormProvider>
          {children}
        </FormProvider>
      </body>
    </html>
  )
}

// context/FormContext.tsx
'use client'

import React, { 
  createContext, 
  useState, 
  useContext, 
  ReactNode 
} from 'react'

// Define types for form data
interface PersonalInfo {
  givenName: string
  familyName: string
  dateOfBirth: string
  taxId: string
}

interface ContactInfo {
  streetAddress: string
  city: string
  state: string
  postalCode: string
}

interface DocumentInfo {
  documentType: string
  documentNumber: string
  documentFile?: File | null
}

interface FormContextType {
  step: number
  formData: {
    personalInfo: PersonalInfo
    contactInfo: ContactInfo
    documentInfo: DocumentInfo
  }
  updateStep: (newStep: number) => void
  updateFormData: (section: keyof FormContextType['formData'], data: any) => void
}

const FormContext = createContext<FormContextType | undefined>(undefined)

export const FormProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [step, setStep] = useState(1)
  const [formData, setFormData] = useState({
    personalInfo: {
      givenName: '',
      familyName: '',
      dateOfBirth: '',
      taxId: ''
    },
    contactInfo: {
      streetAddress: '',
      city: '',
      state: '',
      postalCode: ''
    },
    documentInfo: {
      documentType: '',
      documentNumber: '',
      documentFile: null
    }
  })

  const updateStep = (newStep: number) => {
    setStep(newStep)
  }

  const updateFormData = (section: keyof FormContextType['formData'], data: any) => {
    setFormData(prev => ({
      ...prev,
      [section]: { ...prev[section], ...data }
    }))
  }

  return (
    <FormContext.Provider value={{ 
      step, 
      formData, 
      updateStep, 
      updateFormData 
    }}>
      {children}
    </FormContext.Provider>
  )
}

export const useFormContext = () => {
  const context = useContext(FormContext)
  if (context === undefined) {
    throw new Error('useFormContext must be used within a FormProvider')
  }
  return context
}

// components/ProgressBar.tsx
'use client'

import React from 'react'
import { useFormContext } from '@/context/FormContext'

const ProgressBar: React.FC = () => {
  const { step } = useFormContext()
  const steps = ['Personal Info', 'Contact Details', 'Document Verification', 'Review']
  
  return (
    <div className="w-full mb-8">
      <div className="flex justify-between items-center mb-4">
        {steps.map((label, index) => (
          <div 
            key={label} 
            className={`flex-1 text-center ${
              index + 1 <= step 
                ? 'text-blue-600 font-bold' 
                : 'text-gray-400'
            }`}
          >
            {label}
          </div>
        ))}
      </div>
      <div className="w-full bg-gray-200 rounded-full h-2.5">
        <div 
          className="bg-blue-600 h-2.5 rounded-full" 
          style={{ width: `${((step - 1) / 3) * 100}%` }}
        ></div>
      </div>
    </div>
  )
}

export default ProgressBar

// components/PersonalInfoForm.tsx
'use client'

import React from 'react'
import { useForm } from 'react-hook-form'
import { useFormContext } from '@/context/FormContext'

const PersonalInfoForm: React.FC = () => {
  const { updateStep, updateFormData, formData } = useFormContext()
  const { 
    register, 
    handleSubmit, 
    formState: { errors } 
  } = useForm({
    defaultValues: formData.personalInfo
  })

  const onSubmit = (data: any) => {
    updateFormData('personalInfo', data)
    updateStep(2)
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      <div>
        <label className="block text-sm font-medium text-gray-700">Given Name</label>
        <input
          {...register('givenName', { required: 'Given name is required' })}
          className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"
        />
        {errors.givenName && <p className="text-red-500">{errors.givenName.message}</p>}
      </div>
      
      <div>
        <label className="block text-sm font-medium text-gray-700">Family Name</label>
        <input
          {...register('familyName', { required: 'Family name is required' })}
          className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"
        />
        {errors.familyName && <p className="text-red-500">{errors.familyName.message}</p>}
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">Date of Birth</label>
        <input
          type="date"
          {...register('dateOfBirth', { required: 'Date of birth is required' })}
          className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"
        />
        {errors.dateOfBirth && <p className="text-red-500">{errors.dateOfBirth.message}</p>}
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">Tax ID</label>
        <input
          {...register('taxId', { 
            required: 'Tax ID is required',
            pattern: {
              value: /^\d{9}$/,
              message: 'Tax ID must be 9 digits'
            }
          })}
          className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"
        />
        {errors.taxId && <p className="text-red-500">{errors.taxId.message}</p>}
      </div>
      
      <button 
        type="submit" 
        className="w-full bg-blue-600 text-white py-2 rounded-md hover:bg-blue-700"
      >
        Next
      </button>
    </form>
  )
}

export default PersonalInfoForm

// app/page.tsx
'use client'

import React from 'react'
import ProgressBar from '@/components/ProgressBar'
import PersonalInfoForm from '@/components/PersonalInfoForm'
import { useFormContext } from '@/context/FormContext'

export default function KYCPage() {
  const { step } = useFormContext()

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
      <div className="w-full max-w-md bg-white p-8 rounded-xl shadow-md">
        <h1 className="text-2xl font-bold mb-6 text-center">KYC Registration</h1>
        <ProgressBar />
        
        {step === 1 && <PersonalInfoForm />}
        {/* Future steps will be added here */}
      </div>
    </div>
  )
}

